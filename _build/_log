### Starting build.
# Target: d.ml.depends, tags: { extension:ml, file:d.ml, ocaml, ocamldep, quiet, traverse }
ocamldep.opt -modules d.ml > d.ml.depends # cached
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse }
ocamldep.opt -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse }
ocamlc.opt -c -I /Users/lisajeong/.opam/default/lib/llvm -o ast.cmo ast.ml # cached
# Target: dparse.mly, tags: { extension:mly, file:dparse.mly, infer, ocaml, ocamlyacc, parser, quiet, traverse }
ocamlyacc dparse.mly # cached
# Target: dparse.mli.depends, tags: { extension:mli, file:dparse.mli, ocaml, ocamldep, quiet, traverse }
ocamldep.opt -modules dparse.mli > dparse.mli.depends # cached
# Target: dparse.cmi, tags: { byte, compile, extension:mli, file:dparse.mli, interf, ocaml, quiet, traverse }
ocamlc.opt -c -I /Users/lisajeong/.opam/default/lib/llvm -o dparse.cmi dparse.mli # cached
# Target: irgen.ml.depends, tags: { extension:ml, file:irgen.ml, ocaml, ocamldep, quiet, traverse }
ocamldep.opt -modules irgen.ml > irgen.ml.depends # cached
# Target: sast.ml.depends, tags: { extension:ml, file:sast.ml, ocaml, ocamldep, quiet, traverse }
ocamldep.opt -modules sast.ml > sast.ml.depends # cached
# Target: sast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, quiet, traverse }
ocamlc.opt -c -I /Users/lisajeong/.opam/default/lib/llvm -o sast.cmo sast.ml # cached
# Target: scanner.mll, tags: { extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet, traverse }
ocamllex.opt -q scanner.mll # cached
# Target: scanner.ml.depends, tags: { extension:ml, file:scanner.ml, ocaml, ocamldep, quiet, traverse }
ocamldep.opt -modules scanner.ml > scanner.ml.depends # cached
# Target: semant.ml.depends, tags: { extension:ml, file:semant.ml, ocaml, ocamldep, quiet, traverse }
ocamldep.opt -modules semant.ml > semant.ml.depends # cached
# Target: irgen.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:irgen.cmo, file:irgen.ml, implem, ocaml, quiet, traverse }
ocamlc.opt -c -I /Users/lisajeong/.opam/default/lib/llvm -o irgen.cmo irgen.ml
+ ocamlc.opt -c -I /Users/lisajeong/.opam/default/lib/llvm -o irgen.cmo irgen.ml
File "irgen.ml", lines 46-51, characters 36-21:
46 | ....................................function
47 |       A.Struct n -> struct_t n
48 |     | A.Int   -> i32_t
49 |     | A.Float -> float_t
50 |     | A.String -> string_t
51 |     | A.Bool  -> i1_t
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Void|Array _)
File "irgen.ml", lines 84-85, characters 35-33:
84 | ...................................function
85 |     A.Array ar -> ltype_of_typ ar
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Int|Float|String|Bool|Void|Struct _)
File "irgen.ml", lines 138-160, characters 20-43:
138 | ....................(match t with
139 |         A.Int -> L.const_int i32_t 0
140 |         | A.Float -> L.const_float float_t 0.0
141 |         | A.String -> 
142 |           let alloc = L.build_alloca string_t "alloc" builder in
...
157 |           let data_loc = L.build_array_alloca  llvm_typ (i32OF cap) "data_loc" builder in
158 |           let _ = L.build_store data_loc data_loca builder in
159 |           let _ = L.build_store (i32OF len) len_loc builder in
160 |           L.build_load alloc "val" builder)..............
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(Void|Struct _)
File "irgen.ml", lines 206-209, characters 10-11:
206 | ..........(match (snd v) with
207 |             SId si ->
208 |               ignore(L.build_store e1 (lookup map si) builder); e1, map1, builder
209 |           )
Warning 8 [partial-match]: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(SNoexpr _|SNot (_, _)|SIntLit _|SFloatLit _|SStringLit _|SBoolLit _|
SArrayLit _|SVar _|SAssign ((_, _), (_, _))|SOpAssign (_, _, (_, _))|
SArrayAssign ((_, _), (_, _), (_, _))|SArrayIndex ((_, _), (_, _))|
SStructAssign ((_, _), _, (_, _))|SStructUse ((_, _), _)|SUnop (_, (_, _))|
SBinop ((_, _), _, (_, _))|SCall (_, _))
File "irgen.ml", line 213, characters 20-21:
213 |         (match (snd v) with
                          ^
Error: This expression has type string but an expression was expected of type
         'a * 'b
Command exited with code 2.
# Compilation unsuccessful.
